/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/smoke-test/hello-world": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Prompt */
        get: operations["prompt_smoke_test_hello_world_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/external-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * External Login
         * @description Get the auth redirect URL
         */
        get: operations["external_login_api_v1_users_external_login_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/auth-callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Auth Callback */
        get: operations["auth_callback_api_v1_users_auth_callback_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Access Token
         * @description Refresh the access token using a valid refresh token.
         */
        post: operations["refresh_access_token_api_v1_users_refresh_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Profile */
        get: operations["get_user_profile_api_v1_users_me_get"];
        put?: never;
        post?: never;
        /**
         * Delete User Account
         * @description Delete the authenticated user's account
         *
         *     Args:
         *         hard_delete: If True, permanently removes all user data. If False, soft-deletes the account.
         *
         *     Returns:
         *         No content on success
         */
        delete: operations["delete_user_account_api_v1_users_me_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update User */
        patch: operations["update_user_api_v1_users__patch"];
        trace?: never;
    };
    "/api/v1/users/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload Profile Image */
        post: operations["upload_profile_image_api_v1_users_avatar_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/primary-qwirl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Primary Qwirl
         * @description Get the user's primary Qwirl
         *
         *     Returns:
         *         The user's primary Qwirl or an error if none is set
         */
        get: operations["get_primary_qwirl_api_v1_users_primary_qwirl_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Posts
         * @description Get posts created by a user
         *
         *     Args:
         *         user_id: ID of the user whose posts to retrieve (defaults to authenticated user)
         *         skip: Number of posts to skip for pagination
         *         limit: Maximum number of posts to return
         *
         *     Returns:
         *         List of posts created by the user
         */
        get: operations["get_user_posts_api_v1_users_posts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User By Id
         * @description Get a user's profile by user ID with relationship status
         *
         *     Args:
         *         user_id: ID of the user to retrieve
         *
         *     Returns:
         *         User profile with relationship status information
         */
        get: operations["get_user_by_id_api_v1_users__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/qwirl/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Qwirls
         * @description Get all qwirls of a user
         *
         *     Returns:
         *         Qwirls
         */
        get: operations["get_qwirls_api_v1_qwirl__get"];
        put?: never;
        /**
         * Add Qwirl
         * @description Add new qwirl
         *
         *     Returns:
         *         qwirl
         */
        post: operations["add_qwirl_api_v1_qwirl__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/qwirl/{qwirl_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Qwirl Id
         * @description Get qwirl by qwirl id
         *
         *     Returns:
         *         Qwirl
         */
        get: operations["get_qwirl_id_api_v1_qwirl__qwirl_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Qwirl
         * @description Delete a qwirl
         *
         *     Returns:
         *         Failure or 204
         */
        delete: operations["delete_qwirl_api_v1_qwirl__qwirl_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Qwirl
         * @description Update a qwirl of logged in user
         *
         *     Args:
         *         qwirl_id (int): qwirl id
         *
         *     Returns:
         *         Qwirl
         */
        patch: operations["update_qwirl_api_v1_qwirl__qwirl_id__patch"];
        trace?: never;
    };
    "/api/v1/qwirl/user/{user_id}/primary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Primary Qwirl
         * @description Get the primary Qwirl of a specific user
         *
         *     Args:
         *         user_id (int): The ID of the user whose primary Qwirl to retrieve
         *
         *     Returns:
         *         The user's primary Qwirl or an appropriate error
         */
        get: operations["get_user_primary_qwirl_api_v1_qwirl_user__user_id__primary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/qwirl-responses/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Qwirl Response
         * @description Add new qwirl
         *
         *     Returns:
         *         qwirl
         */
        post: operations["add_qwirl_response_api_v1_qwirl_responses__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/qwirl-responses/{response_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Qwirl Response By Id
         * @description Get qwirl response by id
         *
         *     Returns:
         *         Qwirl
         */
        get: operations["get_qwirl_response_by_id_api_v1_qwirl_responses__response_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Qwirl Response
         * @description Delete a qwirl response
         *
         *     Returns:
         *         Failure or 204
         */
        delete: operations["delete_qwirl_response_api_v1_qwirl_responses__response_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/question-categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Categories
         * @description Get all categories
         *
         *     Returns:
         *         Categories
         */
        get: operations["get_categories_api_v1_question_categories__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/question-bank/by-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Questions By Category */
        get: operations["get_questions_by_category_api_v1_question_bank_by_category_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/question-bank/by-tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Questions By Tag */
        get: operations["get_questions_by_tag_api_v1_question_bank_by_tag_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/post/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Post */
        post: operations["create_post_api_v1_post__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/post/{post_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Post By Id */
        get: operations["get_post_by_id_api_v1_post__post_id__get"];
        put?: never;
        post?: never;
        /** Delete Post */
        delete: operations["delete_post_api_v1_post__post_id__delete"];
        options?: never;
        head?: never;
        /** Update Post */
        patch: operations["update_post_api_v1_post__post_id__patch"];
        trace?: never;
    };
    "/api/v1/post/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List My Posts */
        get: operations["list_my_posts_api_v1_post_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_follows/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Followers */
        get: operations["get_user_followers_api_v1_user_follows_followers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_follows/friends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Friends
         * @description Get list of user's friends
         */
        get: operations["get_user_friends_api_v1_user_follows_friends_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_follows/relationship/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Relationship
         * @description Get relationship status with another user
         */
        get: operations["get_relationship_api_v1_user_follows_relationship__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_follows/follow/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Follow User
         * @description Follow a user
         */
        post: operations["follow_user_api_v1_user_follows_follow__user_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_follows/unfollow/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unfollow User
         * @description Unfollow a user
         */
        post: operations["unfollow_user_api_v1_user_follows_unfollow__user_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health */
        get: operations["health__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AuthResponse */
        AuthResponse: {
            user: components["schemas"]["UserResponse"];
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
        };
        /** Body_upload_profile_image_api_v1_users_avatar_post */
        Body_upload_profile_image_api_v1_users_avatar_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** PostAttachment */
        PostAttachment: {
            /**
             * Type
             * @constant
             */
            type: "poll";
            /** Text */
            text?: string | null;
            /** Options */
            options?: string[] | null;
            /** Tags */
            tags?: string[] | null;
            /** Image Src */
            image_src?: string | null;
        };
        /** PostBase */
        PostBase: {
            /** Id */
            id: number | null;
            /** User Id */
            user_id: number | null;
            attachments: components["schemas"]["PostAttachment"];
        };
        /** PostCreate */
        PostCreate: {
            attachments: components["schemas"]["PostAttachment"];
        };
        /** PostResponse */
        PostResponse: {
            /** Id */
            id: number;
            /** Content */
            content: string;
            /** Media Urls */
            media_urls?: string[] | null;
            /** Created By */
            created_by: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Likes Count
             * @default 0
             */
            likes_count: number;
            /**
             * Comments Count
             * @default 0
             */
            comments_count: number;
            /**
             * Is Liked
             * @default false
             */
            is_liked: boolean | null;
        };
        /** QwirlAnswer */
        QwirlAnswer: {
            /** Question Id */
            question_id: number | null;
            /** Answer */
            answer: string | null;
            /** Comment */
            comment: string | null;
        };
        /** QwirlAnswerCreate */
        QwirlAnswerCreate: {
            /** Question Id */
            question_id: number;
            /** Answer */
            answer: string;
            /** Comment */
            comment: string;
        };
        /** QwirlBase */
        QwirlBase: {
            /** Id */
            id: number;
            /** Questions */
            questions: components["schemas"]["QwirlQuestion"][] | null;
            /** Tags */
            tags: string[] | null;
            /** Created By */
            created_by: number | null;
            user: components["schemas"]["QwirlUser"] | null;
        };
        /** QwirlCreate */
        QwirlCreate: {
            /** Questions */
            questions: components["schemas"]["QwirlQuestionCreate"][];
            /** Tags */
            tags: string[];
        };
        /** QwirlList */
        QwirlList: {
            /** Qwirls */
            qwirls: components["schemas"]["QwirlBase"][];
            /** Count */
            count: number | null;
        };
        /** QwirlQuestion */
        QwirlQuestion: {
            /** Id */
            id: number | null;
            /** Text */
            text: string | null;
            /** Options */
            options: string[];
            /**
             * Is Deleted
             * @default false
             */
            is_deleted: boolean | null;
        };
        /** QwirlQuestionCreate */
        QwirlQuestionCreate: {
            /** Text */
            text: string;
            /** Options */
            options: string[];
        };
        /** QwirlQuestionUpdate */
        QwirlQuestionUpdate: {
            /** Id */
            id: number | null;
            /** Text */
            text: string | null;
            /** Options */
            options: string[];
            /**
             * Is Deleted
             * @default false
             */
            is_deleted: boolean | null;
        };
        /** QwirlResponse */
        QwirlResponse: {
            /** Id */
            id: number;
            /** Questions */
            questions: components["schemas"]["QwirlQuestion"][] | null;
            /** Tags */
            tags: string[] | null;
            /** Created By */
            created_by: number | null;
        };
        /** QwirlResponseBase */
        QwirlResponseBase: {
            /** Id */
            id: number;
            /** Answers */
            answers: components["schemas"]["QwirlAnswer"][] | null;
            /** Qwirl Id */
            qwirl_id: number | null;
            /** Answered By */
            answered_by: number | null;
            user: components["schemas"]["QwirlUser"] | null;
        };
        /** QwirlResponseCreate */
        QwirlResponseCreate: {
            /** Answers */
            answers: components["schemas"]["QwirlAnswerCreate"][];
            /** Qwirl Id */
            qwirl_id: number;
        };
        /** QwirlUpdate */
        QwirlUpdate: {
            /** Questions */
            questions?: components["schemas"]["QwirlQuestionUpdate"][] | null;
            /** Tags */
            tags?: string[] | null;
        };
        /** QwirlUser */
        QwirlUser: {
            /** Name */
            name: string | null;
            /** Username */
            username: string | null;
            /** Id */
            id: number | null;
        };
        /** RefreshTokenOnly */
        RefreshTokenOnly: {
            /** Refresh Token */
            refresh_token: string;
        };
        /** RelationshipStatus */
        RelationshipStatus: {
            /** Is Following */
            is_following: boolean;
            /** Is Followed By */
            is_followed_by: boolean;
            /** Is Friend */
            is_friend: boolean;
        };
        /** ResponseBody */
        ResponseBody: {
            /** Message */
            message: string;
        };
        /** UserFollowerResponse */
        UserFollowerResponse: {
            /** Id */
            id: number;
            /** Username */
            username: string;
            /** Name */
            name: string | null;
            /** Avatar */
            avatar: string | null;
        };
        /** UserResponse */
        UserResponse: {
            /** Id */
            id: number;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Username */
            username: string;
            /** Name */
            name: string | null;
            /** Phone */
            phone: string | null;
            /** Avatar */
            avatar: string | null;
            /** Header Img */
            header_img: string | null;
            /** Categories */
            categories: string[];
            /** Has Seen Onboarding */
            has_seen_onboarding: boolean | null;
            /** Followers Count */
            followers_count: number;
            /** Following Count */
            following_count: number;
            /** Friends Count */
            friends_count: number;
        };
        /** UserUpdate */
        UserUpdate: {
            /** Name */
            name?: string | null;
            /** Phone */
            phone?: string | null;
            /** Username */
            username?: string | null;
            /** Has Seen Onboarding */
            has_seen_onboarding?: boolean | null;
            /** Categories */
            categories?: string[] | null;
        };
        /** UserWithRelationshipResponse */
        UserWithRelationshipResponse: {
            /** Id */
            id: number;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Username */
            username: string;
            /** Name */
            name: string | null;
            /** Phone */
            phone: string | null;
            /** Avatar */
            avatar: string | null;
            /** Header Img */
            header_img: string | null;
            /** Categories */
            categories: string[];
            /** Has Seen Onboarding */
            has_seen_onboarding: boolean | null;
            /** Followers Count */
            followers_count: number;
            /** Following Count */
            following_count: number;
            /** Friends Count */
            friends_count: number;
            relationship: components["schemas"]["RelationshipStatus"];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    prompt_smoke_test_hello_world_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseBody"];
                };
            };
        };
    };
    external_login_api_v1_users_external_login_get: {
        parameters: {
            query: {
                client_type: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    auth_callback_api_v1_users_auth_callback_get: {
        parameters: {
            query: {
                client_type: string;
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_access_token_api_v1_users_refresh_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenOnly"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_profile_api_v1_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    delete_user_account_api_v1_users_me_delete: {
        parameters: {
            query?: {
                /** @description Whether to permanently delete all user data */
                hard_delete?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_api_v1_users__patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_profile_image_api_v1_users_avatar_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_profile_image_api_v1_users_avatar_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_primary_qwirl_api_v1_users_primary_qwirl_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QwirlResponse"];
                };
            };
        };
    };
    get_user_posts_api_v1_users_posts_get: {
        parameters: {
            query?: {
                user_id?: number | null;
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_by_id_api_v1_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithRelationshipResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_qwirls_api_v1_qwirl__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QwirlList"];
                };
            };
        };
    };
    add_qwirl_api_v1_qwirl__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QwirlCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QwirlBase"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_qwirl_id_api_v1_qwirl__qwirl_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                qwirl_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QwirlBase"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_qwirl_api_v1_qwirl__qwirl_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                qwirl_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_qwirl_api_v1_qwirl__qwirl_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                qwirl_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QwirlUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QwirlBase"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_primary_qwirl_api_v1_qwirl_user__user_id__primary_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QwirlBase"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_qwirl_response_api_v1_qwirl_responses__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QwirlResponseCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QwirlResponseBase"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_qwirl_response_by_id_api_v1_qwirl_responses__response_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                response_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QwirlResponseBase"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_qwirl_response_api_v1_qwirl_responses__response_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                response_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_categories_api_v1_question_categories__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_questions_by_category_api_v1_question_bank_by_category_get: {
        parameters: {
            query: {
                category: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_questions_by_tag_api_v1_question_bank_by_tag_get: {
        parameters: {
            query: {
                tag: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_post_api_v1_post__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostBase"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_post_by_id_api_v1_post__post_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostBase"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_post_api_v1_post__post_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_post_api_v1_post__post_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostBase"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_my_posts_api_v1_post_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_followers_api_v1_user_follows_followers_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_friends_api_v1_user_follows_friends_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserFollowerResponse"][];
                };
            };
        };
    };
    get_relationship_api_v1_user_follows_relationship__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    follow_user_api_v1_user_follows_follow__user_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unfollow_user_api_v1_user_follows_unfollow__user_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
